Grid - 
to show the data from the data source of sql connection on html web page by dropping a table.


View state - 
It store the value of a variable. Whenever a page is reloaded after a round trip the instance gets lost. So to receive that instance without the use of server.
Disadavantage is it is not secure.

State management - 
As web app are stateless, it is the process  of maintaining states of values between muliple request of pages

- Client side
1) Hidden fields - Does not reload the page whenever any change is happining in the backend. It also can be accessed in other pages. eg . Increment of Counter when a button is clicked....the value of that counter can be accessed in other fields also.

2) Query String - It is used to pass the value from one page to another through URL using the '?'. The value is collected using the QueryString[""] from the variable set in the URL. Similar to subjects in Angular
 
- Server side
1) Sessions - 
To maintain the instance of the present session we create it by writing 'Session' in front of that variable

to destroy session - Session.Abandon() or after 20 mins automatically



User control - 

1) It is used for increasing the reusability by capturing the data. eg. selecting a date in the calander.
2) Its extension is ascx and that of a web form is aspx
3) Its decorator starts from @Control and cannot have html, head, body elements & that of a normal web form statrs from @Page which have <html>, <head>, <body>.




Function Call - 

1) Call by Value - only the value of the variable gets changed
2) Call by Reference - The value of the variable gets changed as it changes of where the value is stored in the memory 




Cusrsor - (Declare, Open, Fetch, Close)

Cursor is a Temporary Memory or Temporary Work Station. It is Allocated by Database Server at the Time of Performing DML operations on Table by User. 
Cursors are used to store Database Tables.


Allows to iterate a set of rows returned by a query during fetch operation.

We create cusror inside a stored procedure & handle the result set returned by the query.

My SQL cursors are read only and non scrollable

1) Implicit Cursor - Implicit Cursors are also known as Default Cursors of SQL SERVER. These Cursors are allocated by SQL SERVER when the user performs DML operations.

2) Explicit Cursor - Explicit Cursors are Created by Users whenever the user requires them. Explicit Cursors are used for Fetching data from Table in Row-By-Row Manner.

How to create Explicit Cursor:

Declare Cursor Object.
Syntax : DECLARE cursor_name CURSOR FOR SELECT * FROM table_name

eg. DECLARE s1 CURSOR FOR SELECT * FROM studDetails



Open Cursor Connection.
Syntax : OPEN cursor_connection
eg. OPEN s1



Fetch Data from cursor.

There are total 6 methods to access data from cursor. They are as follows :

FIRST is used to fetch only the first row from cursor table.

LAST is used to fetch only last row from cursor table.

NEXT is used to fetch data in forward direction from cursor table.

PRIOR is used to fetch data in backward direction from cursor table.

ABSOLUTE n is used to fetch the exact nth row from cursor table.

RELATIVE n is used to fetch the data in incremental way as well as decremental way.



Syntax : FETCH NEXT/FIRST/LAST/PRIOR/ABSOLUTE n/RELATIVE n FROM cursor_name

FETCH FIRST FROM s1
FETCH LAST FROM s1
FETCH NEXT FROM s1
FETCH PRIOR FROM s1
FETCH ABSOLUTE 7 FROM s1
FETCH RELATIVE -2 FROM s1


Close cursor connection.
Syntax : CLOSE cursor_name
eg. CLOSE s1


Deallocate cursor memory.
Syntax : DEALLOCATE cursor_name
eg. DEALLOCATE s1



Triggers - 
 Triggers are the SQL codes that are automatically executed in response to certain events on a particular table. These are used to maintain the integrity of data.
 
 eg.1
 
 Create trigger sample_trigger
 before Insert
 on student
 FOR EACH ROW
 SET new.marks = new.marks + 6;
 
 ------------------------------------------------------------------------------------------------------------
 eg.2
 
 Alter TRIGGER [dbo].[trigger_EmployeeTarget_3ndJune] ON [dbo].[EmployeeTarget_2ndJune]
AFTER UPDATE
AS
BEGIN TRY
UPDATE EmployeeTarget_2ndJune  SET salary = salary + 500  WHERE empName = 'Amrita';
END TRY
BEGIN CATCH
END CATCH
GO

------------------------------------------------------------------------------------------------------------

eg.3

--Insert trigger
CREATE TRIGGER [dbo].[tr_tb1Employee_forInsert_3ndJune] ON [dbo].[Employee_3ndJune]
FOR INSERT
AS
BEGIN TRY
DECLARE @ID INT
SELECT @ID=ID FROM INSERTED
INSERT INTO tb1EmployeeAudit_3ndJune VALUES(
'New Employee with id = '+CAST(@ID AS VARCHAR(5))+ '  IS ADDED AT '+CAST(GETDATE() AS varchar(60))
);
END TRY
BEGIN CATCH
END CATCH
GO


----------------------------------------------------------------------------------------------------------

eg.4

--DELETE TRIGGERS
CREATE TRIGGER [dbo].[tr_tb1Employee_forDelete_3ndJune] ON [dbo].[Employee_3ndJune]
FOR DELETE
AS
BEGIN TRY
DECLARE @ID INT
SELECT @ID=ID FROM DELETED
INSERT INTO tb1EmployeeAudit_3ndJune VALUES(
'Employee with id = '+CAST(@ID AS VARCHAR(5))+ '  is deleted at '+CAST(GETDATE() AS varchar(60))
);
END TRY
BEGIN CATCH
END CATCH
GO


-----------------------------------------------------------------------------------------------------------------

eg.5

--UPDATE TRIGGERS
CREATE TRIGGER [dbo].[tr_tb1Employee_forUpdate_3ndJune] ON [dbo].[Employee_3ndJune]
FOR UPDATE
AS
BEGIN TRY
DECLARE @NAME VARCHAR(50)
DECLARE @NEW_SALARY INT , @OLD_SALARY INT

SELECT @NEW_SALARY=SALARY , @NAME=NAME FROM INSERTED
SELECT @OLD_SALARY=SALARY FROM DELETED

INSERT INTO tb1EmployeeAudit_3ndJune VALUES(
'Salary of '+@NAME+ ' was changed to '+CAST(@NEW_SALARY AS varchar(10))+' from '+CAST(@OLD_SALARY AS VARCHAR(10))
);
END TRY
BEGIN CATCH
END CATCH
GO

----------------------------------------------------------------------------------------------------------------------

eg.6

--inserted
CREATE TRIGGER [dbo].[tr_tb1Employee_inserteddTable_3ndJune] ON [dbo].[Employee_3ndJune]
FOR INSERT
AS
BEGIN TRY
SELECT * FROM INSERTED
END TRY
BEGIN CATCH
END CATCH
GO

---------------------------------------------------------------------------------------------------------------------

eg.7

--inserted and deleted
CREATE TRIGGER [dbo].[tr_tb1Employee_InseredAndDeleted_3ndJune] ON [dbo].[Employee_3ndJune]
FOR UPDATE
AS
BEGIN TRY
SELECT * FROM DELETED
SELECT * FROM INSERTED
END TRY
BEGIN CATCH
END CATCH
GO

update Employee_3ndJune set gender='Female',salary=10000 , age=21, deptId=3 where id=6  

------------------------------------------------------------------------------------------------------------

eg.8

--Create trigger
CREATE TRIGGER tr_DDL_CreateTable_3ndJune ON database
FOR CREATE_TABLE
AS
BEGIN TRY
PRINT 'New Table Created !!'
END TRY
BEGIN CATCH
END CATCH
GO
-----------------------------------------------------------------------------------------------------------9

eg.9

--Alter  trigger
CREATE TRIGGER tr_DDL_AlterTable_3ndJune ON database
FOR ALTER_TABLE
AS
BEGIN TRY
PRINT 'You have just Altered a table !!'
END TRY
BEGIN CATCH
END CATCH
GO
------------------------------------------------------------------------------------------------------------

eg.10

--Drop trigger
CREATE TRIGGER tr_DDL_DropTable_3ndJune ON database
FOR DROP_TABLE
AS
BEGIN TRY
PRINT 'You have just Dropped a table !!'
END TRY
BEGIN CATCH
END CATCH
GO
------------------------------------------------------------------------------------------------------------

eg.11

--Multiple event in single trigger
CREATE TRIGGER tr_DDL_3ndJune ON database
FOR CREATE_TABLE , ALTER_TABLE , DROP_TABLE
AS
BEGIN TRY
PRINT 'You have just Created , Altered or Dropped a table !!'
END TRY
BEGIN CATCH
END CATCH
GO

------------------------------------------------------------------------------------------------------------

eg.12

create table demo_3rdJune(id int);
alter table demo_3rdJune add name varchar(50);
drop table demo_3rdJune;
select * from demo_3rdJune;
------------------------------------------------------------------------------------------------------------



 
 
 
 Dynamic SQL - 
 it a SQL build from strings at runtime.
 
 eg. 
 Declare @sql nvarchar(1000)
 Declare @prams nvarchar(1000)
 
 Set @sql = "Select * from Employees where FirstName = @FirstName" and LastName = @LastName"
 Set @params = @FirstName nvarchar(100), @LastName nvarchar(100)"
 
 Execute sp_execute @sql, @params, @FirstName = "Ben", @LastName="Hstings"
 
 
 Functions - 
 It is similar to procedure but this returns value.
 
 We can call a procedure from a function but not vice versa.
 
 
* SQL Server supports two types of functions - 
1) User-Defined function: User-defined functions are create by a user.
	
 
	SQL Server supports two types of user-defined functions:
		1) Table-Valued Functions - 
			In this type of function, we select a table data using a user-created function. A function is created using the Create function SQL command.
			
			eg. Create function Fun_EmployeeInformation()      
				returns table       
				as      
				return(select * from Employee)
				
				
				
		2) Scalar Valued Functions - 
			Now we are getting an Employee table with two different data joined and displayed in a single column data row.
			
			eg. Create function fnGetEmpFullName
				(
					@FirstName varchar(50),
					@LastName varchar(50)
				)
				returns varchar(101)
				As
				Begin return (Select @FirstName + ' '+ @LastName);
				end
				
				
				
			Calling the above function - 
				- Select dbo.fnGetEmpFullName(FirstName,LastName) as Name, Salary from Employee

  
			
 
2) System Defined Function: System functions are built-in database functions. 
 eg. Aggregate Function - 
		select max(salary) as Salary from employee 
		
		
 
 MYSQL Syntax:
 
 eg. Create or Replace Function total custs
 Return number
 IS
 total number(2) = 0;
 Begin
	Select Count(*) into total
	From Customers;
Return total;
END
 
 Procedure - 
 Can perform an action but cannot return a value.
 
 eg.1 create procedure [database-name].[procedure-name]
 as begin
 select * from country
 end
 go
 ------------------------------------------------------------------------------------------------------------
 
 eg.2 

create table Employee_5thJune
(
empId int primary key IDENTITY ,
empName varchar(100),
gender varchar(10),
salary int,
age int,
doj date 
);

select * from Employee_5thJune;

------------------------------------------------------------------------------------------------------------
eg.3 

Alter procedure sp_GetSalary_Employee_4thJune
@name varchar(50)
as 
begin
update Employee_4thJune set salary = salary+5000  WHERE  empName = 'Amrita'
end

------------------------------------------------------------------------------------------------------------
eg.4

create  proc spGetEmployee5thJuneByGender
@Gender VARCHAR(50),
@EmployeeCount int Output
AS 
BEGIN
select @EmployeeCount = Count(empId) from Employee_5thJune where gender = @Gender
END


Declare @TotalEmployee int 
Declare @gen = 'Female'
EXEC spGetEmployee5thJuneByGender @gen , @TotalEmployee output
select @TotalEmployee as Female_Employee

------------------------------------------------------------------------------------------------------------


--drop proc sp_GetSalary_Employee_4thJune
 ------------------------------------------------------------------------------------------------------------
 
 
 
 View - 
 virtual tables
 
 used for hiding the complexity and only showing the values
 
 Not stored in th DB but in the query object
 
 
Indexes - 
Used to speed up query

1) Primary Indexes
	a) Dense - No. of entities in index table is same as No. of Entities in Main Table
	b) Sparse - No. of entities in index table is not equal to No. of Entities in Main Table

2) Clustering - 

2) Clustering - 

Muliple entities pointing to a single entity. 

	a) Clustered Index - An Index having some extra columns added(If more that one column is added in that index, then it is called as a composite clustered index). A 				     clustered index determines the physical order of data in a table. For this reason a table have only one clustered index.
	b) Non-Clustered - It has seperate Index and data. When it is created and displayed, it shows a seperate data table apart from the original table. We can create many 				   non-clustered in one Table.

3) Secondary - 

one single entity pointing to another single entity which further points to a group of entities.
